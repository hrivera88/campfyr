name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: campfyr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json

      - name: Install dependencies
        working-directory: ./api
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/campfyr_test
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/campfyr_test
        run: npx prisma migrate deploy

      - name: Run tests
        working-directory: ./api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/campfyr_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-ci
          NODE_ENV: test
        run: npm test

      - name: Run linter
        working-directory: ./api
        run: npm run lint

      - name: Build backend
        working-directory: ./api
        run: npm run build

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Run tests
        working-directory: ./client
        run: npm run test:safe

      - name: Run linter
        working-directory: ./client
        run: npm run lint

      - name: Build frontend
        working-directory: ./client
        run: npm run build

  build-check:
    name: Full Build Verification
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install root dependencies
        run: npm ci

      - name: Verify monorepo structure
        run: |
          echo "✓ API directory exists" && test -d api
          echo "✓ Client directory exists" && test -d client
          echo "✓ Docker compose file exists" && test -f docker-compose.yml
          echo "✓ All components verified"